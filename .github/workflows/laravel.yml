name: üöÄ Laravel cPanel Deployment

on:
  push:
    branches:
      - development
  pull_request:
    branches:
      - staging
      - master
    types: [closed]
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - '.env.example'

jobs:
  # Development Deployment (on push to development)
  development-deploy:
    if: github.ref == 'refs/heads/development' && github.event_name == 'push'
    name: ‚öôÔ∏è Development Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: üõ†Ô∏è Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêò Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, ctype, fileinfo, openssl, pdo, tokenizer, xml
          ini-values: memory_limit=512M, max_execution_time=300
          coverage: none

      - name: üì¶ Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: üì¶ Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: üõ†Ô∏è Check for Frontend
        id: check_frontend
        run: |
          if [ -f package-lock.json ] || [ -f package.json ]; then
            echo "has_frontend=true" >> $GITHUB_OUTPUT
          else
            echo "has_frontend=false" >> $GITHUB_OUTPUT
          fi

      - name: üì¶ Cache Node modules
        if: steps.check_frontend.outputs.has_frontend == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: üèóÔ∏è Build Assets for Development
        if: steps.check_frontend.outputs.has_frontend == 'true'
        run: |
          npm ci --silent
          npm run dev --silent

      - name: üöÄ Deploy to Dev Server
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.DEV_FTP_HOST }}
          username: ${{ secrets.DEV_FTP_USERNAME }}
          password: ${{ secrets.DEV_FTP_PASSWORD }}
          port: 21
          protocol: ftp
          security: loose
          local-dir: ./
          server-dir: ./
          log-level: verbose
          dangerous-clean-slate: false
          exclude: |
            **/.git*
            **/.github/**
            **/.idea/**
            **/node_modules/**
            **/tests/**
            **/bootstrap/cache/**
            .env*
            docker-compose*
            vite.config.js
            webpack.mix.js
            package*.json
            composer.*
            phpunit.xml
            README.md
            .DS_Store
            Thumbs.db

      - name: üì¢ Notify Slack (Dev Success)
        if: success() && contains(github.event.head_commit.message, 'slack')
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: 'Laravel Dev Bot üß™'
          SLACK_ICON_EMOJI: ':test_tube:'
          SLACK_COLOR: '#439FE0'
          SLACK_TITLE: '‚úÖ Dev Deployment Done'
          SLACK_MESSAGE: |
            üß™ *Development Deployment Completed*
            ‚Ä¢ Branch: ${{ github.ref_name }}
            ‚Ä¢ Commit: <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>
            ‚Ä¢ Message: ${{ github.event.head_commit.message }}
            ‚Ä¢ By: ${{ github.actor }}

      - name: üì¢ Notify Slack (Dev Failure)
        if: failure() && contains(github.event.head_commit.message, 'slack')
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: 'Laravel Dev Bot ‚ùå'
          SLACK_ICON_EMOJI: ':x:'
          SLACK_COLOR: '#ff0000'
          SLACK_TITLE: '‚ùå Dev Deployment Failed'
          SLACK_MESSAGE: |
            üö® *Development Deployment Failed*
            ‚Ä¢ Branch: ${{ github.ref_name }}
            ‚Ä¢ Commit: <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>
            ‚Ä¢ Message: ${{ github.event.head_commit.message }}
            ‚Ä¢ By: ${{ github.actor }}

      - name: ‚úÖ Done
        run: |
          echo "‚úÖ Dev Deployment complete at $(date)"
          echo "Triggered by: ${{ github.sha }}"

  # Staging Deployment (on merged PR to staging)
  staging-deploy:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'staging'
    name: üö¶ Staging Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: üõ†Ô∏è Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêò Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, ctype, fileinfo, openssl, pdo, tokenizer, xml
          ini-values: memory_limit=512M, max_execution_time=300
          coverage: none

      - name: üì¶ Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: üì¶ Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev

      - name: üõ†Ô∏è Check for Frontend
        id: check_frontend
        run: |
          if [ -f package-lock.json ] || [ -f package.json ]; then
            echo "has_frontend=true" >> $GITHUB_OUTPUT
          else
            echo "has_frontend=false" >> $GITHUB_OUTPUT
          fi

      - name: üì¶ Cache Node modules
        if: steps.check_frontend.outputs.has_frontend == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: üèóÔ∏è Build Assets for Staging
        if: steps.check_frontend.outputs.has_frontend == 'true'
        run: |
          npm ci --silent
          npm run build --silent

      - name: üöÄ Deploy to Staging Server
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.STAGING_FTP_HOST }}
          username: ${{ secrets.STAGING_FTP_USERNAME }}
          password: ${{ secrets.STAGING_FTP_PASSWORD }}
          port: 21
          protocol: ftp
          security: loose
          local-dir: ./
          server-dir: ./
          log-level: verbose
          dangerous-clean-slate: false
          exclude: |
            **/.git*
            **/.github/**
            **/.idea/**
            **/node_modules/**
            **/tests/**
            **/bootstrap/cache/**
            .env*
            docker-compose*
            vite.config.js
            webpack.mix.js
            package*.json
            composer.*
            phpunit.xml
            README.md
            .DS_Store
            Thumbs.db

      - name: üì¢ Notify Slack (Staging Success)
        if: success() && contains(github.event.pull_request.title, 'slack')
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: 'Laravel Staging Bot üö¶'
          SLACK_ICON_EMOJI: ':traffic_light:'
          SLACK_COLOR: '#FFD700'
          SLACK_TITLE: '‚úÖ Staging Deployment Done'
          SLACK_MESSAGE: |
            üö¶ *Staging Deployment Completed*
            ‚Ä¢ Branch: ${{ github.event.pull_request.base.ref }}
            ‚Ä¢ PR: <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }}>
            ‚Ä¢ Title: ${{ github.event.pull_request.title }}
            ‚Ä¢ By: ${{ github.event.pull_request.user.login }}

      - name: üì¢ Notify Slack (Staging Failure)
        if: failure() && contains(github.event.pull_request.title, 'slack')
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: 'Laravel Staging Bot ‚ùå'
          SLACK_ICON_EMOJI: ':x:'
          SLACK_COLOR: '#ff0000'
          SLASH_TITLE: '‚ùå Staging Deployment Failed'
          SLACK_MESSAGE: |
            üö® *Staging Deployment Failed*
            ‚Ä¢ Branch: ${{ github.event.pull_request.base.ref }}
            ‚Ä¢ PR: <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }}>
            ‚Ä¢ Title: ${{ github.event.pull_request.title }}
            ‚Ä¢ By: ${{ github.event.pull_request.user.login }}

      - name: ‚úÖ Done
        run: |
          echo "‚úÖ Staging Deployment complete at $(date)"
          echo "Triggered by PR: ${{ github.event.pull_request.number }}"

  # Production Deployment (on merged PR to master)
  production-deploy:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
    name: üõ°Ô∏è Production Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: production

    steps:
      - name: üõ†Ô∏è Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêò Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, ctype, fileinfo, openssl, pdo, tokenizer, xml
          ini-values: memory_limit=512M, max_execution_time=300
          coverage: none

      - name: üì¶ Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: üì¶ Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev

      - name: üõ†Ô∏è Check for Frontend
        id: check_frontend
        run: |
          if [ -f package-lock.json ] || [ -f package.json ]; then
            echo "has_frontend=true" >> $GITHUB_OUTPUT
          else
            echo "has_frontend=false" >> $GITHUB_OUTPUT
          fi

      - name: üì¶ Cache Node modules
        if: steps.check_frontend.outputs.has_frontend == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: üèóÔ∏è Build Assets for Production
        if: steps.check_frontend.outputs.has_frontend == 'true'
        run: |
          npm ci --silent
          npm run build --silent

      - name: üöÄ Deploy to Production Server
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.PROD_FTP_HOST }}
          username: ${{ secrets.PROD_FTP_USERNAME }}
          password: ${{ secrets.PROD_FTP_PASSWORD }}
          port: 21
          protocol: ftp
          security: loose
          local-dir: ./
          server-dir: ./
          log-level: verbose
          dangerous-clean-slate: false
          exclude: |
            **/.git*
            **/.github/**
            **/.idea/**
            **/node_modules/**
            **/tests/**
            **/bootstrap/cache/**
            .env*
            docker-compose*
            vite.config.js
            webpack.mix.js
            package*.json
            composer.*
            phpunit.xml
            README.md
            .DS_Store
            Thumbs.db

      - name: üì¢ Notify Slack (Production Success)
        if: success() && contains(github.event.pull_request.title, 'slack')
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: 'Laravel Deployer üöÄ'
          SLACK_ICON_EMOJI: ':rocket:'
          SLACK_COLOR: '#36a64f'
          SLACK_TITLE: '‚úÖ Production Deployed'
          SLACK_MESSAGE: |
            üéâ *Production Deployment Completed*
            ‚Ä¢ Repo: ${{ github.repository }}
            ‚Ä¢ Branch: ${{ github.event.pull_request.base.ref }}
            ‚Ä¢ PR: <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }}>
            ‚Ä¢ Title: ${{ github.event.pull_request.title }}
            ‚Ä¢ By: ${{ github.event.pull_request.user.login }}

      - name: üì¢ Notify Slack (Production Failure)
        if: failure() && contains(github.event.pull_request.title, 'slack')
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: 'Laravel Deployer ‚ùå'
          SLACK_ICON_EMOJI: ':x:'
          SLACK_COLOR: '#ff0000'
          SLACK_TITLE: '‚ùå Production Deployment Failed'
          SLACK_MESSAGE: |
            üö® *Production Deployment Failed*
            ‚Ä¢ Repo: ${{ github.repository }}
            ‚Ä¢ Branch: ${{ github.event.pull_request.base.ref }}
            ‚Ä¢ PR: <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }}>
            ‚Ä¢ Title: ${{ github.event.pull_request.title }}
            ‚Ä¢ By: ${{ github.event.pull_request.user.login }}

      - name: ‚úÖ Done
        run: |
          echo "üéâ Production Deployment complete at $(date)"
          echo "Triggered by PR: ${{ github.event.pull_request.number }}"
